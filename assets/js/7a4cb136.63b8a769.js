"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[950],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),f=i,m=u["".concat(c,".").concat(f)]||u[f]||d[f]||o;return n?r.createElement(m,a(a({ref:t},p),{},{components:n})):r.createElement(m,a({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},9560:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(7462),i=(n(7294),n(3905));const o={},a="\u5217\u8868\u521d\u59cb\u5316",s={unversionedId:"cpp/initializer_list",id:"cpp/initializer_list",title:"\u5217\u8868\u521d\u59cb\u5316",description:"Since C++ 11",source:"@site/docs/cpp/25. initializer_list.md",sourceDirName:"cpp",slug:"/cpp/initializer_list",permalink:"/cpp/cpp/initializer_list",draft:!1,tags:[],version:"current",sidebarPosition:25,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u5de6\u503c\u5f15\u7528\u548c\u53f3\u503c\u5f15\u7528",permalink:"/cpp/cpp/\u5de6\u503c\u5f15\u7528\u548c\u53f3\u503c\u5f15\u7528"},next:{title:"C++ \u4e2d\u7684\u9762\u5411\u5bf9\u8c61",permalink:"/cpp/cpp/oop"}},c={},l=[],p={toc:l};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u5217\u8868\u521d\u59cb\u5316"},"\u5217\u8868\u521d\u59cb\u5316"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Since C++ 11")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'template <class T> struct S {\n  std::vector<T> v;\n  S(std::initializer_list<T> l) : v(l) {\n    std::cout << "constructed with a " << l.size() << "-element list\\n";\n  }\n  void append(std::initializer_list<T> l) {\n    v.insert(v.end(), l.begin(), l.end());\n  }\n  std::pair<const T *, std::size_t> c_arr() const {\n    return {&v[0], v.size()}; // copy list-initialization in return statement\n                              // this is NOT a use of std::initializer_list\n  }\n};\n\ntemplate <typename T> void templated_fn(T) {}\n\nint main() {\n  S<int> s = {1, 2, 3, 4, 5}; // copy list-initialization\n  s.append({6, 7, 8});        // list-initialization in function call\n\n  std::cout << "The vector size is now " << s.c_arr().second << " ints:\\n";\n\n  for (auto n : s.v)\n    std::cout << n << \' \';\n  std::cout << \'\\n\';\n\n  std::cout << "Range-for over brace-init-list: \\n";\n\n  for (int x : {-1, -2, -3}) // the rule for auto makes this ranged-for work\n    std::cout << x << \' \';\n  std::cout << \'\\n\';\n\n  auto al = {10, 11, 12}; // special rule for auto\n\n  std::cout << "The list bound to auto has size() = " << al.size() << \'\\n\';\n\n  //    templated_fn({1, 2, 3}); // compiler error! "{1, 2, 3}" is not an\n  //    expression,\n  // it has no type, and so T cannot be deduced\n  templated_fn<std::initializer_list<int>>({1, 2, 3}); // OK\n  templated_fn<std::vector<int>>({1, 2, 3});           // also OK\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-txt"},"constructed with a 5-element list\nThe vector size is now 8 ints:\n1 2 3 4 5 6 7 8 \nRange-for over brace-init-list: \n-1 -2 -3 \nThe list bound to auto has size() = 3\n")))}u.isMDXComponent=!0}}]);