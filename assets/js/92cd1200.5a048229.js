"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5293],{3905:(n,e,r)=>{r.d(e,{Zo:()=>u,kt:()=>k});var t=r(7294);function i(n,e,r){return e in n?Object.defineProperty(n,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):n[e]=r,n}function a(n,e){var r=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.push.apply(r,t)}return r}function l(n){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?a(Object(r),!0).forEach((function(e){i(n,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(r,e))}))}return n}function o(n,e){if(null==n)return{};var r,t,i=function(n,e){if(null==n)return{};var r,t,i={},a=Object.keys(n);for(t=0;t<a.length;t++)r=a[t],e.indexOf(r)>=0||(i[r]=n[r]);return i}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(t=0;t<a.length;t++)r=a[t],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(n,r)&&(i[r]=n[r])}return i}var p=t.createContext({}),c=function(n){var e=t.useContext(p),r=e;return n&&(r="function"==typeof n?n(e):l(l({},e),n)),r},u=function(n){var e=c(n.components);return t.createElement(p.Provider,{value:e},n.children)},s="mdxType",m={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},d=t.forwardRef((function(n,e){var r=n.components,i=n.mdxType,a=n.originalType,p=n.parentName,u=o(n,["components","mdxType","originalType","parentName"]),s=c(r),d=i,k=s["".concat(p,".").concat(d)]||s[d]||m[d]||a;return r?t.createElement(k,l(l({ref:e},u),{},{components:r})):t.createElement(k,l({ref:e},u))}));function k(n,e){var r=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var a=r.length,l=new Array(a);l[0]=d;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=n,o[s]="string"==typeof n?n:i,l[1]=o;for(var c=2;c<a;c++)l[c]=r[c];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8909:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>p,contentTitle:()=>l,default:()=>s,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var t=r(7462),i=(r(7294),r(3905));const a={},l="\u6392\u5e8f\u7b97\u6cd5\u603b\u7ed3",o={unversionedId:"\u7b97\u6cd5/\u6392\u5e8f\u7b97\u6cd5\u603b\u7ed3",id:"\u7b97\u6cd5/\u6392\u5e8f\u7b97\u6cd5\u603b\u7ed3",title:"\u6392\u5e8f\u7b97\u6cd5\u603b\u7ed3",description:"\u6392\u5e8f\u5c31\u662f\u5c06\u4e00\u7ec4\u5bf9\u8c61\u6309\u7167\u67d0\u79cd\u903b\u8f91\u987a\u5e8f\u91cd\u65b0\u6392\u5217\u7684\u8fc7\u7a0b\u3002",source:"@site/docs/\u7b97\u6cd5/3. \u6392\u5e8f\u7b97\u6cd5\u603b\u7ed3.md",sourceDirName:"\u7b97\u6cd5",slug:"/\u7b97\u6cd5/\u6392\u5e8f\u7b97\u6cd5\u603b\u7ed3",permalink:"/cpp/\u7b97\u6cd5/\u6392\u5e8f\u7b97\u6cd5\u603b\u7ed3",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"LRU \u7f13\u5b58\u6dd8\u6c70\u7b56\u7565",permalink:"/cpp/\u7b97\u6cd5/LRU"},next:{title:"\u5806",permalink:"/cpp/\u7b97\u6cd5/\u5806\u7684\u521b\u5efa"}},p={},c=[{value:"\u9009\u62e9\u6392\u5e8f",id:"\u9009\u62e9\u6392\u5e8f",level:2},{value:"\u63d2\u5165\u6392\u5e8f",id:"\u63d2\u5165\u6392\u5e8f",level:2},{value:"\u5e0c\u5c14\u6392\u5e8f",id:"\u5e0c\u5c14\u6392\u5e8f",level:2},{value:"\u5f52\u5e76\u6392\u5e8f",id:"\u5f52\u5e76\u6392\u5e8f",level:2},{value:"\u5feb\u901f\u6392\u5e8f",id:"\u5feb\u901f\u6392\u5e8f",level:2}],u={toc:c};function s(n){let{components:e,...r}=n;return(0,i.kt)("wrapper",(0,t.Z)({},u,r,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u6392\u5e8f\u7b97\u6cd5\u603b\u7ed3"},"\u6392\u5e8f\u7b97\u6cd5\u603b\u7ed3"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"\u6392\u5e8f\u5c31\u662f\u5c06\u4e00\u7ec4\u5bf9\u8c61\u6309\u7167\u67d0\u79cd\u903b\u8f91\u987a\u5e8f\u91cd\u65b0\u6392\u5217\u7684\u8fc7\u7a0b\u3002")),(0,i.kt)("h2",{id:"\u9009\u62e9\u6392\u5e8f"},"\u9009\u62e9\u6392\u5e8f"),(0,i.kt)("p",null,"\u5bf9\u4e8e\u6570\u7ec4 arr\uff0c\u4ece\u5c0f\u81f3\u5927\u6392\u5e8f\uff0c\u7b97\u6cd5\u6b65\u9aa4\u5982\u4e0b\uff1a"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"\u5bf9\u4e8e",(0,i.kt)("inlineCode",{parentName:"p"},"arr[i]"),"\uff0c\u5bfb\u627e\u533a\u95f4",(0,i.kt)("inlineCode",{parentName:"p"},"[i + 1,n]"),"\u6700\u5c0f\u503c min \u7d22\u5f15 index\uff1b")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"\u4ea4\u6362",(0,i.kt)("inlineCode",{parentName:"p"},"arr[i]"),"\u548c",(0,i.kt)("inlineCode",{parentName:"p"},"arr[index]"),"\u3002"))),(0,i.kt)("p",null,"\u7279\u70b9\uff1a"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"\u8fd0\u884c\u65f6\u95f4\u548c\u8f93\u5165\u6570\u7ec4\u662f\u5426\u6709\u5e8f\u65e0\u5173\uff1b")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"\u6570\u636e\u79fb\u52a8\u6700\u5c11\uff0c\u4ec5\u6709",(0,i.kt)("inlineCode",{parentName:"p"},"N"),"\u6b21\u4ea4\u6362\u3002"))),(0,i.kt)("p",null,"\u4ee3\u7801\u5b9e\u73b0\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"// \u9009\u62e9\u6392\u5e8f\n// \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7d22\u5f15\uff0c\u5728\u8be5\u7d22\u5f15\u4e4b\u540e\u9009\u62e9\u4e00\u4e2a\u6700\u5c0f\u7684\u503c\uff0c\u7136\u540e\u4e0e\u8be5\u7d22\u5f15\u4ea4\u6362\n// \u8fd9\u6837\u5c31\u80fd\u786e\u4fdd\u83b7\u5f97\u6bcf\u4e00\u4e2a\u6700\u5c0f\u7684\u503c\ninline void select_sort(std::vector<int> &arr) {\n  for (int i = 0; i < arr.size(); i++) {\n    int ele = arr[i];\n    int min_index = i;\n    for (int j = i + 1; j < arr.size(); j++) {\n      if (arr[j] < arr[min_index]) {\n        min_index = j;\n      }\n    }\n\n    swap(&arr[i], &arr[min_index]);\n  }\n}\n")),(0,i.kt)("h2",{id:"\u63d2\u5165\u6392\u5e8f"},"\u63d2\u5165\u6392\u5e8f"),(0,i.kt)("p",null,"\u5bf9\u4e8e\u6570\u7ec4 arr\uff0c\u4ece\u5c0f\u81f3\u5927\u6392\u5e8f\uff0c\u7b97\u6cd5\u6b65\u9aa4\u5982\u4e0b\uff1a"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"\u5bf9\u4e8e",(0,i.kt)("inlineCode",{parentName:"p"},"arr[i]"),"\uff0c\u4fdd\u6301\u5de6\u65b9\u6709\u5e8f\uff0c\u5224\u65ad\u533a\u95f4",(0,i.kt)("inlineCode",{parentName:"p"},"[0, i]"),"\uff0c\u82e5",(0,i.kt)("inlineCode",{parentName:"p"},"arr[i] < arr[i - 1]"),"\uff0c\u5219\u4f7f\u5f97\u5927\u503c\u53f3\u79fb\uff1b")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"\u76f4\u5230",(0,i.kt)("inlineCode",{parentName:"p"},"arr[i] >= arr[i - 1]"),"\u7ed3\u675f\u53f3\u79fb\uff0c\u63d2\u5165",(0,i.kt)("inlineCode",{parentName:"p"},"arr[i]"),"\u3002"))),(0,i.kt)("p",null,"\u4ee3\u7801\u5b9e\u73b0\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"// \u63d2\u5165\u6392\u5e8f\n// \u8981\u6c420-i\u5fc5\u987b\u662f\u6709\u5e8f\u7684\uff0c\u5bf9\u4e8earr[i]\uff0c\u5224\u65ad\u5176\u5728 0-i \u5185\u63d2\u5165\u7684\u7d22\u5f15\u5373\u53ef\ninline void insert_sort(std::vector<int> &arr) {\n  for (int i = 1; i < arr.size(); i++) {\n    int a = arr[i];\n    int j = i;\n    while (j > 0 && arr[j - 1] > a) {\n      arr[j] = arr[j - 1];\n      j--;\n    }\n    arr[j] = a;\n  }\n}\n")),(0,i.kt)("h2",{id:"\u5e0c\u5c14\u6392\u5e8f"},"\u5e0c\u5c14\u6392\u5e8f"),(0,i.kt)("p",null,"\u5e0c\u5c14\u6392\u5e8f\u57fa\u4e8e\u63d2\u5165\u6392\u5e8f\u4f18\u5316\u5f97\u6765\u3002"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"\u5bf9\u4e8e\u5927\u89c4\u6a21\u4e71\u5e8f\u6570\u7ec4\u63d2\u5165\u6392\u5e8f\u5f88\u6162\uff0c\u56e0\u4e3a\u5b83\u53ea\u4f1a\u4ea4\u6362\u76f8\u90bb\u7684\u5143\u7d20\uff0c\u56e0\u6b64\u5143\u7d20\u53ea\u80fd\u4e00\u70b9\u4e00\u70b9\u7684\u4ece\u6570\u7ec4\u7684\u4e00\u7aef\u79fb\u52a8\u5230\u53e6\u4e00\u7aef\uff0c\u8fd9\u5f88\u4e0d\u9ad8\u6548\u3002")),(0,i.kt)("p",null,"\u5e0c\u5c14\u6392\u5e8f\u7684\u601d\u60f3\u65f6\u4f7f\u6570\u7ec4\u4e2d\u4efb\u610f\u95f4\u9694\u4e3a",(0,i.kt)("inlineCode",{parentName:"p"},"h"),"\u7684\u5143\u7d20\u90fd\u662f\u6709\u5e8f\u7684\uff0c\u8fd9\u6837\u7684\u6570\u7ec4\u88ab\u79f0\u4e3a",(0,i.kt)("strong",{parentName:"p"},"h \u6709\u5e8f\u6570\u7ec4"),"\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4e00\u4e2a h \u6709\u5e8f\u6570\u7ec4\u5c31\u662f\u7531 h \u4e2a\u4e92\u76f8\u72ec\u7acb\u7684\u6709\u5e8f\u6570\u7ec4\u7f16\u7ec7\u5728\u4e00\u8d77\u7ec4\u6210\u7684\u4e00\u4e2a\u6570\u7ec4\u3002\u8fd9\u6837\uff0c\u5728\u8fdb\u884c\u6392\u5e8f\u65f6\uff0c\u5982\u679c h \u5f88\u5927\uff0c\u6211\u4eec\u5c31\u80fd\u628a\u5143\u7d20\u79fb\u52a8\u5230\u5f88\u8fdc\u7684\u5730\u65b9\uff0c\u4e3a\u5b9e\u73b0\u66f4\u5c0f\u7684 h \u6709\u5e8f\u521b\u9020\u65b9\u4fbf\u3002"),(0,i.kt)("p",null,"\u4ee3\u7801\u5b9e\u73b0\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"public static class Shell {\n    public static void sort(Comparable[] arr) {\n        int N = arr.length;\n        int h = 1;\n        while (h < N / 3) h = 3 * h + 1;\n        while (h >= 1) {\n            for (int i = h; i < N; i++) {\n                Comparable temp = arr[i]; // \u8981\u63d2\u5165\u7684\u5143\u7d20\n                int j = i;\n                while (j >= h && less(temp, arr[j - h])) {\n                    arr[j] = arr[j - h];\n                    j -= h;\n                }\n                if (j != i) {\n                    arr[j] = temp;\n                }\n            }\n            h /= 3;\n        }\n    }\n}\n")),(0,i.kt)("h2",{id:"\u5f52\u5e76\u6392\u5e8f"},"\u5f52\u5e76\u6392\u5e8f"),(0,i.kt)("p",null,"\u5f52\u5e76\u6392\u5e8f\u7b97\u6cd5\u601d\u8def\uff1a\u8981\u5c06\u4e00\u4e2a\u6570\u7ec4\u6392\u5e8f\uff0c\u53ef\u4ee5\u5148\u9012\u5f52\u5730\u5c06\u5b83\u5206\u6210\u4e24\u534a\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u5f52\u5e76\u8d77\u6765\u3002"),(0,i.kt)("p",null,"\u7b97\u6cd5\u5b9e\u73b0\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"namespace {\nvoid merge(std::vector<int> &arr, int lo, int mid, int hi);\n\ninline void helper(std::vector<int> &arr, int lo, int hi) {\n  if (lo >= hi)\n    return;\n\n  int mid = lo + ((hi - lo) >> 1);\n  // left\n  helper(arr, lo, mid);\n  // right\n  helper(arr, mid + 1, hi);\n  merge(arr, lo, mid, hi);\n}\n\ninline void merge(std::vector<int> &arr, int lo, int mid, int hi) {\n  static std::vector<int> aux(arr.size(), 0);\n  int i = lo, j = mid + 1;\n  for (int k = lo; k <= hi; k++) {\n    aux[k] = arr[k];\n  }\n  for (int k = lo; k <= hi; k++) {\n    if (i > mid)\n      arr[k] = aux[j++];\n    else if (j > hi)\n      arr[k] = aux[i++];\n    else if (aux[i] < aux[j])\n      arr[k] = aux[i++];\n    else\n      arr[k] = aux[j++];\n  }\n}\n}; // namespace\n\n// \u5f52\u5e76\u6392\u5e8f\n// \u5f52\u5e76\u6392\u5e8f\u7684\u91cd\u70b9\u662f\u5bf9\u6570\u7ec4\u7684\u4e24\u90e8\u5206\u5206\u522b\u6392\u5e8f\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u5f52\u5e76\ninline void merge_sort(std::vector<int> &arr) {\n  helper(arr, 0, arr.size() - 1);\n}\n")),(0,i.kt)("h2",{id:"\u5feb\u901f\u6392\u5e8f"},"\u5feb\u901f\u6392\u5e8f"),(0,i.kt)("p",null,"\u5feb\u901f\u6392\u5e8f\u57fa\u4e8e\u5206\u6cbb\u601d\u60f3\uff0c\u5c06\u4e00\u4e2a\u6570\u7ec4\u5206\u6210\u4e24\u4e2a\u5b50\u6570\u7ec4\uff0c\u4e24\u90e8\u5206\u72ec\u7acb\u5730\u8fdb\u884c\u6392\u5e8f\u3002"),(0,i.kt)("p",null,"\u5feb\u901f\u6392\u5e8f\u548c\u5f52\u5e76\u6392\u5e8f\u662f\u4e92\u8865\u7684\uff1a\u5f52\u5e76\u6392\u5e8f\u662f\u5c06\u6570\u7ec4\u5206\u6210\u4e24\u4e2a\u5b50\u6570\u7ec4\u5206\u522b\u6392\u5e8f\uff0c\u5e76\u5c06\u6709\u5e8f\u7684\u5b50\u6570\u7ec4\u5f52\u5e76\u4ee5\u5c06\u6574\u4e2a\u6570\u7ec4\u6392\u5e8f\uff1b"),(0,i.kt)("p",null,"\u800c\u5feb\u901f\u6392\u5e8f\u5c06\u6570\u7ec4\u6392\u5e8f\u7684\u65b9\u5f0f\u5219\u662f\u5f53\u4e24\u4e2a\u5b50\u6570\u7ec4\u90fd\u6709\u5e8f\u65f6\u6574\u4e2a\u6570\u7ec4\u81ea\u7136\u5c31\u6709\u5e8f\u4e86\u3002"),(0,i.kt)("p",null,"\u5feb\u901f\u6392\u5e8f\u7684\u5de6\u534a\u90e8\u5206\u4e0d\u5927\u4e8e\u67d0\u4e2a\u503c\uff0c\u53f3\u534a\u90e8\u5206\u4e0d\u5c0f\u4e8e\u67d0\u4e2a\u503c\uff0c\u90a3\u4e48\u4e24\u90e8\u5206\u5206\u522b\u6392\u597d\u5e8f\u540e\uff0c\u81ea\u7136\u5c31\u6709\u5e8f\u4e86\u3002"),(0,i.kt)("p",null,"\u7b97\u6cd5\u5b9e\u73b0\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"namespace {\ninline int partition(std::vector<int> &arr, int lo, int hi) {\n  int partition = arr[hi];\n  int index = lo;\n  for (int i = lo; i < hi; i++) {\n    if (arr[i] < partition) {\n      swap(&arr[i], &arr[index++]);\n    }\n  }\n  swap(&arr[hi], &arr[index]);\n  return index;\n}\n}; // namespace\n\ninline void quick_sort(std::vector<int> &arr, int lo, int hi) {\n  if (lo >= hi)\n    return;\n  // \u5206\u6cbb\n  int index = partition(arr, lo, hi);\n  quick_sort(arr, lo, index - 1);\n  quick_sort(arr, index + 1, hi);\n}\n")))}s.isMDXComponent=!0}}]);