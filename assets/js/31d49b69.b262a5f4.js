"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6681],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),d=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=d(e.components);return r.createElement(p.Provider,{value:n},e.children)},c="mdxType",s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},v=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=d(t),v=o,m=c["".concat(p,".").concat(v)]||c[v]||s[v]||a;return t?r.createElement(m,i(i({ref:n},u),{},{components:t})):r.createElement(m,i({ref:n},u))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=v;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var d=2;d<a;d++)i[d]=t[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}v.displayName="MDXCreateElement"},6830:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var r=t(7462),o=(t(7294),t(3905));const a={},i="LRU \u7f13\u5b58\u6dd8\u6c70\u7b56\u7565",l={unversionedId:"\u7b97\u6cd5/LRU",id:"\u7b97\u6cd5/LRU",title:"LRU \u7f13\u5b58\u6dd8\u6c70\u7b56\u7565",description:"LRU \u5168\u79f0 Least Recently Use\uff0c\u5e7f\u6cdb\u5e94\u7528\u4e8e\u7f13\u5b58\u673a\u5236\u4e2d\u3002",source:"@site/docs/\u7b97\u6cd5/2. LRU.md",sourceDirName:"\u7b97\u6cd5",slug:"/\u7b97\u6cd5/LRU",permalink:"/cpp/\u7b97\u6cd5/LRU",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"KMP",permalink:"/cpp/\u7b97\u6cd5/KMP"},next:{title:"\u6392\u5e8f\u7b97\u6cd5\u603b\u7ed3",permalink:"/cpp/\u7b97\u6cd5/\u6392\u5e8f\u7b97\u6cd5\u603b\u7ed3"}},p={},d=[{value:"\u539f\u7406",id:"\u539f\u7406",level:2},{value:"\u89e3\u6790",id:"\u89e3\u6790",level:2},{value:"get",id:"get",level:3},{value:"put",id:"put",level:3},{value:"\u793a\u4f8b\u4ee3\u7801",id:"\u793a\u4f8b\u4ee3\u7801",level:2}],u={toc:d};function c(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"lru-\u7f13\u5b58\u6dd8\u6c70\u7b56\u7565"},"LRU \u7f13\u5b58\u6dd8\u6c70\u7b56\u7565"),(0,o.kt)("p",null,"LRU \u5168\u79f0 Least Recently Use\uff0c\u5e7f\u6cdb\u5e94\u7528\u4e8e\u7f13\u5b58\u673a\u5236\u4e2d\u3002"),(0,o.kt)("p",null,"\u5e94\u7528\u573a\u666f\uff1a\u7f13\u5b58\u4f7f\u7528\u7684\u7a7a\u95f4\u8fbe\u5230\u4e0a\u9650\u540e\uff0c\u5c31\u9700\u8981\u4ece\u5df2\u6709\u7684\u6570\u636e\u4e2d\u6dd8\u6c70\u4e00\u90e8\u5206\u4ee5\u7ef4\u6301\u7f13\u5b58\u7684\u53ef\u7528\u6027\uff0c\u800c\u5982\u4f55\u6dd8\u6c70\u6570\u636e\uff0c\u5c31\u662f\u901a\u8fc7 LRU \u7b97\u6cd5\u5b8c\u6210\u7684\u3002"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u5982\u679c\u4e00\u4e2a\u4fe1\u606f\u9879\u6b63\u5728\u88ab\u8bbf\u95ee\uff0c\u90a3\u4e48\u5728\u8fd1\u671f\u5b83\u5f88\u53ef\u80fd\u8fd8\u4f1a\u88ab\u518d\u6b21\u8bbf\u95ee\u3002")),(0,o.kt)("h2",{id:"\u539f\u7406"},"\u539f\u7406"),(0,o.kt)("p",null,"\u5f53\u8bbf\u95ee\u4e00\u4e2a\u6570\u636e\u65f6\uff1a"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u8be5\u6570\u636e\u4e0d\u5728\u5bb9\u5668\u4e4b\u4e2d\uff0c\u90a3\u4e48\u8bbe\u7f6e\u8be5\u6570\u636e\u7684\u4f18\u5148\u7ea7\u4e3a\u6700\u9ad8\u5e76\u653e\u5165\u5bb9\u5668\u4e2d"),(0,o.kt)("li",{parentName:"ol"},"\u8be5\u6570\u636e\u5728\u5bb9\u5668\u4e2d\uff0c\u90a3\u4e48\u8bbe\u7f6e\u8be5\u6570\u636e\u7684\u4f18\u5148\u7ea7\u4e3a\u6700\u9ad8")),(0,o.kt)("p",null,"\u6570\u636e\u7684\u603b\u91cf\u8fbe\u5230\u4e0a\u9650\u540e\uff0c\u5219\u79fb\u9664\u5bb9\u5668\u4e2d\u4f18\u5148\u7ea7\u6700\u4f4e\u7684\u6570\u636e\u3002"),(0,o.kt)("h2",{id:"\u89e3\u6790"},"\u89e3\u6790"),(0,o.kt)("p",null,"\u4f7f\u7528\u54c8\u5e0c\u8868\u548c\u53cc\u5411\u94fe\u8868\u8fdb\u884c\u5b9e\u73b0\u3002"),(0,o.kt)("p",null,"\u54c8\u5e0c\u8868\u901a\u8fc7\u7f13\u5b58\u6570\u636e\u7684\u952e\u6620\u5c04\u5230\u5176\u5728\u53cc\u5411\u94fe\u8868\u4e2d\u7684\u4f4d\u7f6e\uff08\u4e5f\u5373\u6307\u9488\uff09"),(0,o.kt)("p",null,"\u53cc\u5411\u94fe\u8868\u5b58\u50a8\u952e\u503c\u5bf9\uff0c\u9760\u8fd1\u5934\u90e8\u7684\u952e\u503c\u5bf9\u662f\u6700\u8fd1\u4f7f\u7528\u7684\uff0c\u9760\u8fd1\u5c3e\u90e8\u7684\u952e\u503c\u5bf9\u662f\u6700\u4e45\u672a\u4f7f\u7528\u7684\u3002"),(0,o.kt)("p",null,"\u8fd9\u6837\uff0c\u6211\u4eec\u9996\u5148\u4f7f\u7528\u54c8\u5e0c\u8868\u8fdb\u884c\u5b9a\u4f4d\uff0c\u627e\u51fa\u7f13\u5b58\u9879\u5728\u53cc\u5411\u94fe\u8868\u4e2d\u7684\u4f4d\u7f6e\uff0c\u968f\u540e\u5c06\u5176\u79fb\u52a8\u5230\u53cc\u5411\u94fe\u8868\u7684\u5934\u90e8\uff0c\u5373\u53ef\u5728 O(1) \u65f6\u95f4\u5185\u5b8c\u6210 get \u6216 put \u64cd\u4f5c\u3002"),(0,o.kt)("h3",{id:"get"},"get"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u5982\u679c key \u5b58\u5728\uff0c\u5219 key \u5bf9\u5e94\u7684\u8282\u70b9\u662f\u6700\u8fd1\u88ab\u4f7f\u7528\u7684\u8282\u70b9\uff0c\u901a\u8fc7\u54c8\u5e0c\u8868\u5b9a\u4f4d\u5230\u8282\u70b9\u5728\u53cc\u5411\u94fe\u8868\u4e2d\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u5c06\u5176\u79fb\u52a8\u5230\u53cc\u5411\u94fe\u8868\u7684\u5934\u90e8\uff0c\u6700\u540e\u8fd4\u56de\u8be5\u8282\u70b9\u7684\u503c\u5373\u53ef"),(0,o.kt)("li",{parentName:"ol"},"\u5982\u679c key \u4e0d\u5b58\u5728\uff0c\u76f4\u63a5\u8fd4\u56de -1")),(0,o.kt)("h3",{id:"put"},"put"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u5982\u679c key \u5b58\u5728\uff0c\u5219\u7c7b\u4f3c\u4e8e get \u64cd\u4f5c\uff0c\u9996\u5148\u901a\u8fc7\u54c8\u5e0c\u8868\u5b9a\u4f4d\uff0c\u7136\u540e\u5c06\u5bf9\u5e94\u8282\u70b9\u7684\u503c\u66f4\u65b0\u4e3a value\uff0c\u5e76\u5c06\u8be5\u8282\u70b9\u79fb\u52a8\u81f3\u53cc\u5411\u94fe\u8868\u7684\u5934\u90e8"),(0,o.kt)("li",{parentName:"ol"},"\u5982\u679c key \u4e0d\u5b58\u5728\uff0c\u9996\u5148\u6784\u9020\u4e00\u4e2a\u65b0\u7684\u8282\u70b9\uff0c\u5728\u53cc\u5411\u94fe\u8868\u7684\u5934\u90e8\u6dfb\u52a0\u8be5\u8282\u70b9\uff0c\u5e76\u5c06 key \u548c\u8be5\u8282\u70b9\u6dfb\u52a0\u5230\u54c8\u5e0c\u8868\u4e2d\u3002\u7136\u540e\u5224\u65ad\u53cc\u5411\u94fe\u8868\u7684\u8282\u70b9\u6570\u662f\u5426\u8d85\u51fa\u5bb9\u91cf\uff0c\u5982\u679c\u8d85\u51fa\uff0c\u5219\u5220\u9664\u53cc\u5411\u94fe\u8868\u7684\u5c3e\u90e8\u8282\u70b9\uff0c\u5e76\u5220\u9664\u54c8\u5e0c\u8868\u4e2d\u5bf9\u5e94\u7684\u9879")),(0,o.kt)("h2",{id:"\u793a\u4f8b\u4ee3\u7801"},"\u793a\u4f8b\u4ee3\u7801"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"struct DListNode {\n  int key;\n  int value;\n  DListNode *next;\n  DListNode *prev;\n  DListNode() : key(0), value(0), next(nullptr), prev(nullptr) {}\n  DListNode(int x) : key(x), value(0), next(nullptr), prev(nullptr) {}\n};\n\nclass LRUCache {\nprivate:\n  unordered_map<int, DListNode *> map;\n  DListNode *head;\n  DListNode *tail;\n  int capacity;\n  int size;\n\nprivate:\n  void AddToHead(DListNode *node) {\n    node->prev = head;\n    node->next = head->next;\n    head->next->prev = node;\n    head->next = node;\n  }\n  void RemoveNode(DListNode *node) {\n    DListNode *prev = node->prev;\n    DListNode *next = node->next;\n    prev->next = next;\n    next->prev = prev;\n  }\n\n  DListNode *RemoveTail() {\n    DListNode *node = tail->prev;\n    RemoveNode(node);\n    return node;\n  }\n\n  void MoveItemHead(DListNode *node) {\n    RemoveNode(node);\n    AddToHead(node);\n  }\n\npublic:\n  LRUCache(int capacity) : capacity(capacity), size(0) {\n    head = new DListNode();\n    tail = new DListNode();\n    head->next = tail;\n    tail->prev = head;\n  }\n\n  int get(int key) {\n    if (map.find(key) == map.end())\n      return -1;\n    else {\n      DListNode *node = map[key];\n      MoveItemHead(node);\n      return node->value;\n    }\n  }\n\n  void put(int key, int value) {\n    if (map.find(key) != map.end()) {\n      DListNode *node = map[key];\n      node->value = value;\n      MoveItemHead(node);\n      return;\n    }\n    DListNode *node = new DListNode(key);\n    node->value = value;\n    AddToHead(node);\n    map[key] = node;\n    size++;\n    if (size > capacity) {\n      DListNode *rm = RemoveTail();\n      map.erase(rm->key);\n      delete rm;\n      size--;\n    }\n  }\n};\n")))}c.isMDXComponent=!0}}]);