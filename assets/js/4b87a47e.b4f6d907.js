"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3490],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>d});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},s=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=l(r),m=i,d=u["".concat(p,".").concat(m)]||u[m]||f[m]||o;return r?n.createElement(d,a(a({ref:t},s),{},{components:r})):n.createElement(d,a({ref:t},s))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=m;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c[u]="string"==typeof e?e:i,a[1]=c;for(var l=2;l<o;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3510:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var n=r(7462),i=(r(7294),r(3905));const o={},a="\u5dee\u5206\u6570\u7ec4",c={unversionedId:"algorithm/\u5dee\u5206\u6570\u7ec4",id:"algorithm/\u5dee\u5206\u6570\u7ec4",title:"\u5dee\u5206\u6570\u7ec4",description:"\u5dee\u5206\u6570\u7ec4\u7684\u4e3b\u8981\u9002\u7528\u573a\u666f\u662f\u9891\u7e41\u5bf9\u539f\u59cb\u6570\u7ec4\u7684\u67d0\u4e2a\u533a\u95f4\u7684\u5143\u7d20\u8fdb\u884c\u589e\u51cf\u3002",source:"@site/docs/algorithm/16. \u5dee\u5206\u6570\u7ec4.md",sourceDirName:"algorithm",slug:"/algorithm/\u5dee\u5206\u6570\u7ec4",permalink:"/cpp/algorithm/\u5dee\u5206\u6570\u7ec4",draft:!1,tags:[],version:"current",sidebarPosition:16,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u6811\u5f62 dp",permalink:"/cpp/algorithm/\u6811\u5f62dp"},next:{title:"ACM \u6a21\u5f0f\u5efa\u6811",permalink:"/cpp/algorithm/ACM \u5efa\u6811"}},p={},l=[],s={toc:l};function u(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u5dee\u5206\u6570\u7ec4"},"\u5dee\u5206\u6570\u7ec4"),(0,i.kt)("p",null,"\u5dee\u5206\u6570\u7ec4\u7684\u4e3b\u8981\u9002\u7528\u573a\u666f\u662f\u9891\u7e41\u5bf9\u539f\u59cb\u6570\u7ec4\u7684\u67d0\u4e2a\u533a\u95f4\u7684\u5143\u7d20\u8fdb\u884c\u589e\u51cf\u3002"),(0,i.kt)("p",null,"\u62fc\u8f66\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n  bool carPooling(vector<vector<int>> &trips, int capacity) {\n    if (trips.size() == 0)\n      return true;\n\n    // \u6784\u5efa\u5dee\u5206\u6570\u7ec4\n    vector<int> diff(10001, 0);\n    for (auto &item : trips) {\n      diff[item[1]] += item[0];\n      diff[item[2]] -= item[0];\n    }\n\n    // \u6784\u5efa\u539f\u59cb\u6570\u7ec4\n    vector<int> passengers(10001, 0);\n    for (int i = 0; i < 10001; i++) {\n      if (i == 0)\n        passengers[0] = diff[0];\n      else\n        passengers[i] = passengers[i - 1] + diff[i];\n\n      if (passengers[i] > capacity)\n        return false;\n    }\n    return true;\n  }\n};\n")))}u.isMDXComponent=!0}}]);