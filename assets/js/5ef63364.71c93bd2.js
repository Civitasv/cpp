"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7876],{3905:(t,e,n)=>{n.d(e,{Zo:()=>s,kt:()=>h});var r=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function p(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?p(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function c(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},p=Object.keys(t);for(r=0;r<p.length;r++)n=p[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(t);for(r=0;r<p.length;r++)n=p[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var l=r.createContext({}),u=function(t){var e=r.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},s=function(t){var e=u(t.components);return r.createElement(l.Provider,{value:e},t.children)},i="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},f=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,p=t.originalType,l=t.parentName,s=c(t,["components","mdxType","originalType","parentName"]),i=u(n),f=o,h=i["".concat(l,".").concat(f)]||i[f]||d[f]||p;return n?r.createElement(h,a(a({ref:e},s),{},{components:n})):r.createElement(h,a({ref:e},s))}));function h(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var p=n.length,a=new Array(p);a[0]=f;var c={};for(var l in e)hasOwnProperty.call(e,l)&&(c[l]=e[l]);c.originalType=t,c[i]="string"==typeof t?t:o,a[1]=c;for(var u=2;u<p;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},2709:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>i,frontMatter:()=>p,metadata:()=>c,toc:()=>u});var r=n(7462),o=(n(7294),n(3905));const p={},a="\u624b\u5199\u4e00\u4e2a shared_ptr",c={unversionedId:"cpp/\u624b\u5199\u4e00\u4e2a shared_ptr",id:"cpp/\u624b\u5199\u4e00\u4e2a shared_ptr",title:"\u624b\u5199\u4e00\u4e2a shared_ptr",description:"\u5e95\u5c42\u5b9e\u73b0\u65b9\u5f0f",source:"@site/docs/cpp/45. \u624b\u5199\u4e00\u4e2a shared_ptr.md",sourceDirName:"cpp",slug:"/cpp/\u624b\u5199\u4e00\u4e2a shared_ptr",permalink:"/cpp/cpp/\u624b\u5199\u4e00\u4e2a shared_ptr",draft:!1,tags:[],version:"current",sidebarPosition:45,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u5f15\u7528",permalink:"/cpp/cpp/\u5f15\u7528"},next:{title:"\u591a\u7ebf\u7a0b\u5f00\u53d1",permalink:"/cpp/cpp/C++ \u4e2d\u7684\u591a\u7ebf\u7a0b\u5f00\u53d1"}},l={},u=[{value:"\u5e95\u5c42\u5b9e\u73b0\u65b9\u5f0f",id:"\u5e95\u5c42\u5b9e\u73b0\u65b9\u5f0f",level:2},{value:"\u4e00\u4e2a\u7b80\u5355\u7684\u5b9e\u73b0",id:"\u4e00\u4e2a\u7b80\u5355\u7684\u5b9e\u73b0",level:2}],s={toc:u};function i(t){let{components:e,...p}=t;return(0,o.kt)("wrapper",(0,r.Z)({},s,p,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"\u624b\u5199\u4e00\u4e2a-shared_ptr"},"\u624b\u5199\u4e00\u4e2a shared_ptr"),(0,o.kt)("h2",{id:"\u5e95\u5c42\u5b9e\u73b0\u65b9\u5f0f"},"\u5e95\u5c42\u5b9e\u73b0\u65b9\u5f0f"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"shared_ptr")," \u5e95\u5c42\u5305\u542b\u4e86\u4e24\u4e2a\u6307\u9488\uff1a"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u6307\u9488 1\uff1a\u6307\u5411\u88ab\u7ba1\u7406\u7684\u5bf9\u8c61"),(0,o.kt)("li",{parentName:"ol"},"\u6307\u9488 2\uff1a\u6307\u5411\u63a7\u5236\u5757")),(0,o.kt)("p",null,"\u63a7\u5236\u5757\u4e2d\u5305\u62ec\u4e00\u4e2a\u6307\u9488\uff08\u6307\u5411\u88ab\u7ba1\u7406\u7684\u5bf9\u8c61\uff09\uff0c\u5f15\u7528\u6570\u91cf\u548c\u5f31\u5f15\u7528\u6570\u91cf\uff0c\u56de\u6536\u5668\u548c\u7a7a\u95f4\u914d\u7f6e\u5668\u3002"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"shared_ptr",src:n(9426).Z,width:"1024",height:"536"})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u4e3a\u4ec0\u4e48\u63a7\u5236\u5757\u4e2d\u4e5f\u8981\u5305\u542b\u4e00\u4e2a\u540c\u6837\u6307\u5411\u88ab\u7ba1\u7406\u7684\u5bf9\u8c61\u7684\u6307\u9488\u5462\uff1f")),(0,o.kt)("p",null,"\u4e8b\u5b9e\u4e0a\uff0c\u63a7\u5236\u5757\u4e2d\u7684\u8be5\u6307\u9488\u4e0e\u6307\u9488 1 \u53ef\u4ee5\u5177\u6709\u4e0d\u540c\u7684\u7c7b\u578b\u548c\u503c\u3002\u5982\u4e0b\u4f8b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'//Another example\n//Inheritance with no virtual destructor \nstruct A { \n //stuff..\n ~A() { std::cout << "~A\\n"; } //not virtual\n};\nstruct B : A { \n //stuff..\n ~B() { std::cout << "~B\\n"; } //not virtual\n};\n\n//shared_ptr<A> managing a B object\n//raw pointer is A* and managed pointer is B*\nauto pa = std::shared_ptr<A>(new B()); //OK\n\npa.reset(); //Calls B\'s destructor\n')),(0,o.kt)("p",null,"\u8fd9\u65f6\uff0c\u4ecd\u7136\u4f1a\u8c03\u7528 B \u7684\u6790\u6784\u51fd\u6570\u3002\u56e0\u4e3a\uff0cshared_ptr \u5728\u6790\u6784\u65f6\u662f\u4f7f\u7528\u7684 control block \u4e2d\u7684\u6307\u9488\uff0c\u800c\u4e0d\u662f\u6307\u9488 1\u3002"),(0,o.kt)("p",null,"\u518d\u770b\u4e00\u4e2a shared_ptr \u522b\u540d\u6784\u9020\u51fd\u6570\u7684\u4f8b\u5b50\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"auto ep = std::shared_ptr<Egg>(new Egg());\n\n// Aliasing constructor to construct shared_ptr<Yolk>\n// yp shares ownership with ep but points to subobject ep->y\nauto yp = std::shared_ptr<Yolk>(ep, &ep->y);\n\nstd::cout << ep.use_count();\n")),(0,o.kt)("p",null,"\u8fd9\u91cc\uff0cep \u7684\u6307\u9488 1 \u6307\u5411\u7684\u662f Egg\uff0cyp \u7684\u6307\u9488 1 \u6307\u5411\u7684\u662f Yolk\uff0c\u4f46 ep \u548c yp \u7684 control block \u4e2d\u7684\u6307\u9488\u6307\u5411\u7684\u90fd\u662f Egg\uff0c\u8fd9\u6837\uff0c\u6790\u6784\u65f6\u624d\u80fd\u6b63\u786e\u7684\u56de\u6536\u5185\u5b58\u3002"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u4f60\u5e94\u8be5\u4f7f\u7528 make_shared:")),(0,o.kt)("p",null,"make_shared \u6548\u7387\u66f4\u9ad8\uff0c\u7edf\u4e00\u4e86\u88ab\u7ba1\u7406\u5bf9\u8c61\u548c control block \u5bf9\u8c61\u521d\u59cb\u5316\u7684\u8fc7\u7a0b\uff0c\u53ea\u9700\u8981\u4e00\u6b21\u5185\u5b58\u5206\u914d\u5373\u53ef\uff0c\u76f8\u6bd4\u4e8e\u5355\u72ec\u521d\u59cb\u5316\u88ab\u7ba1\u7406\u5bf9\u8c61\u548c control block \u5bf9\u8c61\uff0c\u663e\u7136\u6267\u884c\u6548\u7387\u66f4\u9ad8\u4e86\uff01"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u5f15\u7528\u8ba1\u6570\u89c4\u5219\uff1a")),(0,o.kt)("p",null,"\u5f15\u7528\u6570\u91cf\u7684\u9012\u589e\u548c\u9012\u51cf\u662f\u539f\u5b50\u6027\u7684\u3002"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u5f31\u5f15\u7528\u6570\u91cf\uff1a")),(0,o.kt)("p",null,"\u5f31\u5f15\u7528\u6570\u91cf\u4e0e\u6240\u7ba1\u7406\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u5e76\u65e0\u5173\u8054\uff0c\u4f46\u662f\u53ea\u6709\u5f31\u5f15\u7528\u6570\u91cf\u548c\u5f15\u7528\u6570\u91cf\u5747\u4e3a 0 \u7684\u65f6\u5019\uff0ccontrol block \u624d\u4f1a\u88ab\u5220\u9664\u3002"),(0,o.kt)("h2",{id:"\u4e00\u4e2a\u7b80\u5355\u7684\u5b9e\u73b0"},"\u4e00\u4e2a\u7b80\u5355\u7684\u5b9e\u73b0"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"#pragma once\n#include <cstddef>\n#include <iostream>\n#include <memory>\n#include <mutex>\n#include <sys/types.h>\n#include <thread>\n\ntemplate <typename T> class SharedPtr {\nprivate:\n  T *ptr;\n  uint *ref_count; // shared between different `SharedPtr` objects, so it must\n                   // be a pointer.\n\npublic:\n  SharedPtr(T *ptr) : ptr(ptr), ref_count(new uint(1)) {}\n\n  // Copy constructor\n  SharedPtr(const SharedPtr &obj) {\n    std::cout << \"COPY CONSTRUCTOR\" << '\\n';\n    ptr = obj.ptr;\n    ref_count = obj.ref_count;\n    if (obj.ptr) {\n      // if the pointer isn't null, increment the ref count\n      (*ref_count)++;\n    }\n  }\n\n  // Assignment operator\n  SharedPtr &operator=(const SharedPtr &obj) {\n    std::cout << \"COPY ASSIGNMENT\" << '\\n';\n    if (this == &obj) // \u5982\u679c\u662f\u81ea\u5df1\uff0c\u90a3\u4e48\u4e0d\u505a\u4ec0\u4e48\n      return *this;\n    if (obj.ptr) {\n      // if the pointer isn't null, increment the ref count\n      (*obj.ref_count)++;\n    }\n\n    if (--(*ref_count) == 0) {\n      std::cout << \"DELETE IN COPY ASSIGNMENT\" << '\\n';\n      delete ptr;\n      delete ref_count;\n    }\n\n    ptr = obj.ptr;\n    ref_count = obj.ref_count;\n    return *this;\n  }\n\n  // Move constructor\n  SharedPtr(SharedPtr &&obj) {\n    std::cout << \"MOVE CONSTRUCTOR\" << '\\n';\n    ptr = obj.ptr;\n    ref_count = obj.ref_count;\n\n    obj.ptr = nullptr;\n    obj.ref_count = nullptr;\n  }\n\n  // Move assignment\n  SharedPtr &operator=(SharedPtr &&obj) {\n    std::cout << \"MOVE ASSIGNMENT\" << '\\n';\n    if (this == &obj)\n      return *this;\n\n    if (--(*ref_count) == 0) {\n      std::cout << \"DELETE IN MOVE ASSIGNMENT\" << '\\n';\n      delete ptr;\n      delete ref_count;\n    }\n\n    ptr = obj.ptr;\n    ref_count = obj.ref_count;\n\n    obj.ptr = nullptr;\n    obj.ref_count = nullptr;\n    return *this;\n  }\n\n  T *operator->() const { return ptr; }\n\n  T &operator*() const { return *ptr; }\n\n  uint GetCount() const { return *(ref_count); }\n\n  T *Get() const { return ptr; }\n\n  ~SharedPtr() {\n    if (ptr && --*ref_count == 0) {\n      std::cout << \"DELETE IT\" << '\\n';\n      delete ptr;\n      delete ref_count;\n    }\n  }\n};\n")))}i.isMDXComponent=!0},9426:(t,e,n)=>{n.d(e,{Z:()=>r});const r=n.p+"assets/images/2023-03-25-20-22-26-266489ae97b20940bcc362a580c89dc2.png"}}]);