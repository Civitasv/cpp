"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2647],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),s=p(n),d=l,f=s["".concat(c,".").concat(d)]||s[d]||m[d]||o;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function f(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,a=new Array(o);a[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[s]="string"==typeof e?e:l,a[1]=i;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},898:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>s,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(7462),l=(n(7294),n(3905));const o={},a="\u591a\u7ebf\u7a0b",i={unversionedId:"\u5e76\u884c/\u591a\u7ebf\u7a0b",id:"\u5e76\u884c/\u591a\u7ebf\u7a0b",title:"\u591a\u7ebf\u7a0b",description:"\u4e92\u65a5",source:"@site/docs/\u5e76\u884c/3. \u591a\u7ebf\u7a0b.md",sourceDirName:"\u5e76\u884c",slug:"/\u5e76\u884c/\u591a\u7ebf\u7a0b",permalink:"/cpp/\u5e76\u884c/\u591a\u7ebf\u7a0b",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"OpenCL",permalink:"/cpp/\u5e76\u884c/OpenCL"},next:{title:"GPU \u5185\u5b58\u7ed3\u6784",permalink:"/cpp/\u5e76\u884c/GPU \u5185\u5b58\u7ed3\u6784"}},c={},p=[{value:"\u4e92\u65a5",id:"\u4e92\u65a5",level:2},{value:"\u540c\u6b65",id:"\u540c\u6b65",level:2},{value:"\u5b9e\u73b0",id:"\u5b9e\u73b0",level:2},{value:"\u9501",id:"\u9501",level:3},{value:"\u5fd9\u7b49\u5f85\u9501",id:"\u5fd9\u7b49\u5f85\u9501",level:4},{value:"\u65e0\u7b49\u5f85\u9501",id:"\u65e0\u7b49\u5f85\u9501",level:4},{value:"\u4fe1\u53f7\u91cf",id:"\u4fe1\u53f7\u91cf",level:3}],u={toc:p};function s(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"\u591a\u7ebf\u7a0b"},"\u591a\u7ebf\u7a0b"),(0,l.kt)("h2",{id:"\u4e92\u65a5"},"\u4e92\u65a5"),(0,l.kt)("p",null,"\u7ade\u4e89\u6761\u4ef6\uff08race condition\uff09\uff0c\u5f53\u591a\u7ebf\u7a0b\u76f8\u4e92\u7ade\u4e89\u64cd\u4f5c\u5171\u4eab\u53d8\u91cf\u65f6\uff0c\u7531\u4e8e\u8fd0\u6c14\u4e0d\u597d\uff0c\u5373\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u53d1\u751f\u4e86\u4e0a\u4e0b\u6587\u5207\u6362\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u9519\u8bef\u7684\u7ed3\u679c\uff0c\u4e8b\u5b9e\u4e0a\uff0c\u6bcf\u6b21\u8fd0\u884c\u90fd\u53ef\u80fd\u5f97\u5230\u4e0d\u540c\u7684\u7ed3\u679c\uff0c\u56e0\u6b64\u8f93\u51fa\u7684\u7ed3\u679c\u5b58\u5728\u4e0d\u786e\u5b9a\u6027\uff08indeterminate\uff09\u3002"),(0,l.kt)("p",null,"\u7531\u4e8e\u591a\u7ebf\u7a0b\u6267\u884c\u64cd\u4f5c\u5171\u4eab\u53d8\u91cf\u7684\u8fd9\u6bb5\u4ee3\u7801\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7ade\u4e89\u72b6\u6001\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u6b64\u6bb5\u4ee3\u7801\u79f0\u4e3a\u4e34\u754c\u533a\uff08critical section\uff09\uff0c\u5b83\u662f\u8bbf\u95ee\u5171\u4eab\u8d44\u6e90\u7684\u4ee3\u7801\u7247\u6bb5\uff0c\u4e00\u5b9a\u4e0d\u80fd\u7ed9\u591a\u7ebf\u7a0b\u540c\u65f6\u6267\u884c\u3002"),(0,l.kt)("p",null,"\u6211\u4eec\u5e0c\u671b\u8fd9\u6bb5\u4ee3\u7801\u662f\u4e92\u65a5\uff08mutual exclusion\uff09\u7684\uff0c\u4e5f\u5c31\u8bf4\u4fdd\u8bc1\u4e00\u4e2a\u7ebf\u7a0b\u5728\u4e34\u754c\u533a\u6267\u884c\u65f6\uff0c\u5176\u4ed6\u7ebf\u7a0b\u5e94\u8be5\u88ab\u963b\u6b62\u8fdb\u5165\u4e34\u754c\u533a\uff0c\u8bf4\u767d\u4e86\uff0c\u5c31\u662f\u8fd9\u6bb5\u4ee3\u7801\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u6700\u591a\u53ea\u80fd\u51fa\u73b0\u4e00\u4e2a\u7ebf\u7a0b\u3002"),(0,l.kt)("h2",{id:"\u540c\u6b65"},"\u540c\u6b65"),(0,l.kt)("p",null,"\u6240\u8c13\u540c\u6b65\uff0c\u5c31\u662f\u5e76\u53d1\u8fdb\u7a0b/\u7ebf\u7a0b\u5728\u4e00\u4e9b\u5173\u952e\u70b9\u4e0a\u53ef\u80fd\u9700\u8981\u4e92\u76f8\u7b49\u5f85\u4e0e\u4e92\u901a\u6d88\u606f\uff0c\u8fd9\u79cd\u76f8\u4e92\u5236\u7ea6\u7684\u7b49\u5f85\u4e0e\u4e92\u901a\u6d88\u606f\u79f0\u4e3a\u8fdb\u7a0b/\u7ebf\u7a0b\u540c\u6b65\u3002"),(0,l.kt)("h2",{id:"\u5b9e\u73b0"},"\u5b9e\u73b0"),(0,l.kt)("p",null,"\u5728\u5b9e\u73b0\u8fdb\u7a0b/\u7ebf\u7a0b\u7684\u4e92\u65a5\u548c\u540c\u6b65\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u9501\u6216\u8005\u4fe1\u53f7\u91cf\u7684\u65b9\u5f0f\u3002"),(0,l.kt)("p",null,"\u5176\u4e2d\u9501\u7528\u4e8e\u5b9e\u73b0\u4e92\u65a5\uff0c\u800c\u4fe1\u53f7\u91cf\u53ef\u4ee5\u7528\u4e8e\u5b9e\u73b0\u4e92\u65a5\u548c\u540c\u6b65\u3002"),(0,l.kt)("h3",{id:"\u9501"},"\u9501"),(0,l.kt)("p",null,"\u6839\u636e\u9501\u7684\u5b9e\u73b0\u4e0d\u540c\uff0c\u53ef\u4ee5\u5206\u4e3a\u5fd9\u7b49\u5f85\u9501\u548c\u65e0\u5fd9\u7b49\u5f85\u9501\u3002"),(0,l.kt)("h4",{id:"\u5fd9\u7b49\u5f85\u9501"},"\u5fd9\u7b49\u5f85\u9501"),(0,l.kt)("p",null,"\u4f9d\u8d56\u4e8e CPU \u4e2d\u63d0\u4f9b\u7684 ",(0,l.kt)("inlineCode",{parentName:"p"},"Test-and-Set")," \u6307\u4ee4\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <thread>\n#include <vector>\n#include <iostream>\n#include <atomic>\n \nstd::atomic_flag lock = ATOMIC_FLAG_INIT;\n \nvoid f(int n)\n{\n    for (int cnt = 0; cnt < 40; ++cnt) {\n        while (lock.test_and_set(std::memory_order_acquire)) {  \n        // acquire lock\n        // Since C++20, it is possible to update atomic_flag's\n        // value only when there is a chance to acquire the lock.\n        // See also: https://stackoverflow.com/questions/62318642\n        #if defined(__cpp_lib_atomic_flag_test)\n            while (lock.test(std::memory_order_relaxed))        // test lock\n        #endif\n                ; // spin\n        }\n        static int out{};\n        std::cout << n << ((++out % 40) == 0 ? '\\n' : ' ');\n        lock.clear(std::memory_order_release);                  // release lock\n    }\n}\n \nint main()\n{\n    std::vector<std::thread> v;\n    for (int n = 0; n < 10; ++n) {\n        v.emplace_back(f, n);\n    }\n    for (auto& t : v) {\n        t.join();\n    }\n}\n")),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"\u82e5\u6ca1\u6709\u5176\u4ed6\u7ebf\u7a0b\u6301\u6709\u9501\uff0c\u8c03\u7528 lock \u65f6\uff0c",(0,l.kt)("inlineCode",{parentName:"li"},"TestAndSet(flag, 1)")," \u4f1a\u8fd4\u56de 0\uff0c\u8df3\u51fa while \u5faa\u73af\uff0cflag \u88ab\u8bbe\u7f6e\u4e3a 1\uff0c\u8c03\u7528 unlock \u540e\uff0c\u5c06 flag \u6e05\u7406\u4e3a 0"),(0,l.kt)("li",{parentName:"ol"},"\u82e5\u67d0\u7ebf\u7a0b\u5df2\u7ecf\u6301\u6709\u9501\uff0c\u8c03\u7528 lock \u65f6\uff0c",(0,l.kt)("inlineCode",{parentName:"li"},"TestAndSet(flag, 1)")," \u4f1a\u8fd4\u56de 1\uff0c\u672c\u7ebf\u7a0b\u5373\u4f1a\u4e00\u76f4\u5fd9\u7b49\u5f85\uff0c\u5176\u4ed6\u7ebf\u7a0b unlock \u540e\uff0c",(0,l.kt)("inlineCode",{parentName:"li"},"TestAndSet(flag, 1)")," \u624d\u4f1a\u8fd4\u56de 0\uff0c\u8df3\u51fa while \u5faa\u73af\u3002")),(0,l.kt)("p",null,"\u5fd9\u7b49\u5f85\u9501\u53c8\u88ab\u79f0\u4e3a",(0,l.kt)("strong",{parentName:"p"},"\u81ea\u65cb\u9501"),"\u3002"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u8fd9\u662f\u6700\u7b80\u5355\u7684\u4e00\u79cd\u9501\uff0c\u4e00\u76f4\u81ea\u65cb\uff0c\u5229\u7528 CPU \u5468\u671f\uff0c\u76f4\u5230\u9501\u53ef\u7528\u3002\u5728\u5355\u5904\u7406\u5668\u4e0a\uff0c\u9700\u8981\u62a2\u5360\u5f0f\u7684\u8c03\u5ea6\u5668\uff08\u5373\u4e0d\u65ad\u901a\u8fc7\u65f6\u949f\u4e2d\u65ad\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u8fd0\u884c\u5176\u4ed6\u7ebf\u7a0b\uff09\u3002\u5426\u5219\uff0c\u81ea\u65cb\u9501\u5728\u5355 CPU \u4e0a\u65e0\u6cd5\u4f7f\u7528\uff0c\u56e0\u4e3a\u4e00\u4e2a\u81ea\u65cb\u7684\u7ebf\u7a0b\u6c38\u8fdc\u4e0d\u4f1a\u653e\u5f03 CPU\u3002")),(0,l.kt)("h4",{id:"\u65e0\u7b49\u5f85\u9501"},"\u65e0\u7b49\u5f85\u9501"),(0,l.kt)("p",null,"\u83b7\u53d6\u4e0d\u5230\u9501\u7684\u65f6\u5019\uff0c\u4e0d\u7528\u81ea\u65cb\uff0c\u800c\u662f\u628a\u5f53\u524d\u7ebf\u7a0b\u653e\u5165\u5230\u9501\u7684\u7b49\u5f85\u961f\u5217\uff0c\u7136\u540e\u6267\u884c\u8c03\u5ea6\u7a0b\u5e8f\uff0c\u628a CPU \u8ba9\u7ed9\u5176\u4ed6\u7ebf\u7a0b\u6267\u884c\u3002"),(0,l.kt)("h3",{id:"\u4fe1\u53f7\u91cf"},"\u4fe1\u53f7\u91cf"),(0,l.kt)("p",null,"\u4fe1\u53f7\u91cf\u8868\u793a\u8d44\u6e90\u7684\u6570\u91cf\uff0c\u5bf9\u5e94\u7684\u53d8\u91cf\u662f\u4e00\u4e2a\u6574\u578b(sem)\u53d8\u91cf\u3002"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"P \u64cd\u4f5c\uff1a\u5c06 sem \u51cf 1\uff0c\u76f8\u51cf\u540e\uff0c\u5982\u679c sem < 0\uff0c\u90a3\u4e48\u8fdb\u7a0b/\u7ebf\u7a0b\u8fdb\u5165\u963b\u585e\u7b49\u5f85\uff0c\u5426\u5219\u7ee7\u7eed"),(0,l.kt)("li",{parentName:"ul"},"V \u64cd\u4f5c\uff0c\u5c06 sem \u52a0 1\uff0c\u76f8\u52a0\u540e\uff0c\u5982\u679c sem <= 0\uff0c\u90a3\u4e48\u5524\u9192\u4e00\u4e2a\u7b49\u5f85\u4e2d\u7684\u8fdb\u7a0b/\u7ebf\u7a0b")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"As my understanding, mutex is a kind of lock-mechanism, which is implemented based on the OS/kernel. For example, Linux offers a mechanism, which is futex. With the help of futex, we could implement mutex and semaphore. Furthermore, I've known that futex is implemented by the low-level atomic operation, such as CompareAndSet, CompareAndSwap.")))}s.isMDXComponent=!0}}]);